
" Vundle setup yo
source ~/.vim/vundle.vim

syntax on

let mapleader = ","
set backspace=indent,eol,start
set scrolloff=3   " keep 2 visible lines below cursor at all times
set encoding=utf-8
set ruler
set showcmd
set cursorline " show cursor position w/ horiz line
set smartcase
set number

" enable automatic title setting for terminals
set title
set titleold="Terminal"
set titlestring=%F

" If a file is changed outside of vim, auto reload it
set autoread

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set expandtab

" Disables autoindent for current file
nnoremap <F8> :setl noai nocin nosi inde=<CR>

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby
au BufRead,BufNewFile {vimrc.after} setf vim

" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256 " 256 colors
colorscheme solarized
set hlsearch

set background=dark
let g:background_color = 0 " defaults to dark, so dark == 0

function! ToggleColor()
  if (g:background_color)
    set background=dark
    let g:background_color = 0
  else
    set background=light
    let g:background_color = 1
  endif
endfunc

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MISCELLANEOUS KEYMAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" better search, unsets 'last search pattern' register w/ return
nnoremap <CR> :noh<CR><CR>

" remap jj in insert mode to <ESC> to go into normal mode
inoremap jj <ESC>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" use fzf for file search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set rtp+=/usr/local/opt/fzf/

noremap <c-p> :FZF<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

